import matplotlib.pyplot as plt
import matplotlib.patches as ptc
from matplotlib.collections import PatchCollection
from math import ceil
from time import perf_counter


c = [1.0, (5 ** 0.5 - 1) / 4, -(5 ** 0.5 + 1) / 4, -(5 ** 0.5 + 1) / 4, (5 ** 0.5 - 1) / 4]
s = [0.0, (10 + 2 * 5 ** 0.5) ** 0.5 / 4, (10 - 2 * 5 ** 0.5) ** 0.5 / 4, - (10 - 2 * 5 ** 0.5) ** 0.5 / 4, - (10 + 2 * 5 ** 0.5) ** 0.5 / 4]

def create_penrose(gamma, n):
    t1 = perf_counter()
    fat = []
    slim = []
    def K(t, a, b):
        return ceil(round(a * c[t] + b * s[t] + gamma[t], 10))
    
    def is_in_range(points):
        for point in points:
            x, y = point[0], point[1]
            if m <= x <= M or m <= y <= M:
                return True
        else:
            return False

    for i in range(4):
        for j in range(i + 1, 5):
            for x in range(-n, n + 1):
                for y in range(-n, n + 1):
                    x2 = x - gamma[i]
                    y2 = y - gamma[j]
                    a, b = (s[i] * y2 - s[j] * x2) / s[(i - j) % 5], (c[j] * x2 - c[i] * y2) / s[(i - j) % 5]
                    p, q = 0, 0
                    cnt = 0
                    for t in range(5):
                        u = K(t, a, b)
                        cnt += u
                        p += u * c[t]
                        q += u * s[t]
                    points = [[p, q], [p + c[i], q + s[i]], [p + c[i] + c[j], q + s[i] + s[j]], [p + c[j], q + s[j]]]
                    if is_in_range(points):
                        if (abs(i - j) == 1 or abs(i - j) == 4):
                            fat.append(ptc.Polygon(points))
                        else:
                            slim.append(ptc.Polygon(points))
    t2 = perf_counter()

    t3 = perf_counter()
    ax[1].add_collection(PatchCollection(fat, edgecolor="white", facecolor="black"))
    ax[1].add_collection(PatchCollection(slim, edgecolor="white", facecolor="grey"))
    plt.draw_all()
    t4 = perf_counter()
    print(t2 - t1, t4 - t3)


def calc_gamma(re, im):
    return [2 * (re * c[(2 * j) % 5] + im * s[(2 * j) % 5]) / 5 for j in range(5)]


def get_point(event):
    if event.inaxes == ax[0] and event.button == 1:
        x, y = event.xdata, event.ydata
        point.set_xdata([x])
        point.set_ydata([y])
        ax[1].clear()
        ax[1].set_aspect('equal', adjustable='box')
        ax[1].set(xlim=(m, M), ylim=(m, M))
        create_penrose(calc_gamma(x, y), n_line)


n_line = 6
m, M = -10, 10
fig, ax = plt.subplots(1, 2)
ax[0].set_aspect('equal', adjustable='box')
ax[0].set(xlim=(-1, 1), ylim=(-1, 1))
ax[1].set_aspect('equal', adjustable='box')
ax[1].set(xlim=(m, M), ylim=(m, M))
point, = ax[0].plot([0.5], [0], "ko")
plt.connect("button_press_event", get_point)

create_penrose(calc_gamma(0.5, 0), n_line)

plt.show()
